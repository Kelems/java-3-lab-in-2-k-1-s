
package org.example.client;

import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "IReaderService", targetNamespace = "http://service.example.org/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface IReaderService {


    /**
     * 
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<org.example.client.CanBorrowBookResponse>
     */
    @WebMethod(operationName = "canBorrowBook")
    @RequestWrapper(localName = "canBorrowBook", targetNamespace = "http://service.example.org/", className = "org.example.client.CanBorrowBook")
    @ResponseWrapper(localName = "canBorrowBookResponse", targetNamespace = "http://service.example.org/", className = "org.example.client.CanBorrowBookResponse")
    public Response<CanBorrowBookResponse> canBorrowBookAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        Reader arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "canBorrowBook")
    @RequestWrapper(localName = "canBorrowBook", targetNamespace = "http://service.example.org/", className = "org.example.client.CanBorrowBook")
    @ResponseWrapper(localName = "canBorrowBookResponse", targetNamespace = "http://service.example.org/", className = "org.example.client.CanBorrowBookResponse")
    public Future<?> canBorrowBookAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        Reader arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CanBorrowBookResponse> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "canBorrowBook", targetNamespace = "http://service.example.org/", className = "org.example.client.CanBorrowBook")
    @ResponseWrapper(localName = "canBorrowBookResponse", targetNamespace = "http://service.example.org/", className = "org.example.client.CanBorrowBookResponse")
    @Action(input = "http://service.example.org/IReaderService/canBorrowBookRequest", output = "http://service.example.org/IReaderService/canBorrowBookResponse")
    public boolean canBorrowBook(
        @WebParam(name = "arg0", targetNamespace = "")
        Reader arg0);

}
